pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            string(
                                name: 'WARNTIME',
                                defaultValue: '2',
                                description: 'Warning time (in minutes) before starting upgrade'
                            ),
                            string(
                                defaultValue: 'develop',
                                name: 'Please_leave_this_section_as_it_is',
                                trim: true
                            ),
                        ])
                    ])
                }
            }
        }

        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    sh '''
                        id
                        cd weatherapp/auth/src/main
                        go build 
                        cd -
                        ls -la
                    '''
                }
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    sh 'cd weatherapp/UI && npm run'
                }
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    sh 'cd weatherapp/weather && pip3 install -r requirements.txt'
                }
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t bulawesley/auth:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push auth') {
            when {
                expression { env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
                    docker push bulawesley/auth:${BUILD_NUMBER}
                '''
            }
        }

        // The rest of your stages...

        stage('warning') {
            agent { 
                label "jenkins-static-agent"
            }
            when {
                expression { env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                script {
                    // Assuming notifyUpgrade is defined somewhere in your Jenkins setup
                    notifyUpgrade(currentBuild.currentResult, "WARNING")
                    sleep(time: env.WARNTIME.toInteger(), unit: "MINUTES")
                }
            }
        }

        // The rest of your stages...

        stage('Deploy') {
            agent { 
                label "jenkins-static-agent"
            }
            when {
                expression { env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
                    docker-compose down --remove-orphans || true
                    docker-compose up -d 
                    docker-compose ps 
                '''
            }
        }

        stage('checking deployment') {
            agent { 
                label "jenkins-static-agent"
            }
            when {
                expression { env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
                    bash weatherapp/check.sh
                '''
            }
        }
    }
}
