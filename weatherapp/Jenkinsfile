pipeline {
    agent any

    environment {
       DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            string(
                                name: 'WARNTIME',
                                defaultValue: '2',
                                description: 'Warning time (in minutes) before starting upgrade'
                            ),
                            string(
                                defaultValue: 'develop',
                                name: 'Please_leave_this_section_as_it_is',
                                trim: true
                            ),
                        ])
                    ])
                }
            }
        }

        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('Sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t devopseasylearning/weatherapp-auth:v${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push auth') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/weatherapp-auth:v${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Build UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t devopseasylearning/weatherapp-ui:v${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push UI') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/weatherapp-ui:v${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Build Weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t devopseasylearning/weatherapp-weather:v${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push weather') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/weatherapp-weather:v${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Build Redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t devopseasylearning/weatherapp-redis:v${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push redis') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/weatherapp-redis:v${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t devopseasylearning/weatherapp-db:v${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push db') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/weatherapp-db:v${BUILD_NUMBER}.1
                '''
            }
        }

        stage('warning') {
            agent {
                label "Jenkins-static-agent"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    notifyUpgrade(currentBuild.currentResult, "WARNING")
                    sleep(time: env.WARNTIME, unit: "MINUTES")
                }
            }
        }

        stage('Generate-compose') {
            agent {
                label "Jenkins-static-agent"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'WEATHERAPP_MYSQL_ROOT_PASSWORD', variable: 'WEATHERAPP_MYSQL_ROOT_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_REDIS_PASSWORD', variable: 'WEATHERAPP_REDIS_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_DB_PASSWORD', variable: 'WEATHERAPP_DB_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_APIKEY', variable: 'WEATHERAPP_APIKEY')
                    ]) {
                        sh '''
                            cat <<EOF > docker-compose.yml
                            version: '3.5'
                            services:
                                db:
                                    container_name: weatherapp-db
                                    image: devopseasylearning/weatherapp-db:v${BUILD_NUMBER}.1
                                    environment:
                                        MYSQL_ROOT_PASSWORD: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}
                                    volumes:
                                        - db-data:/var/lib/mysql
                                    networks:   
                                        - weatherapp
                                    restart: always

                                redis:
                                    container_name: weatherapp-redis
                                    image: devopseasylearning/weatherapp-redis:v${BUILD_NUMBER}.1
                                    networks:
                                        - weatherapp
                                    environment:
                                        REDIS_USER: redis
                                        REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
                                    volumes:
                                        - redis-data:/data
                                    restart: always

                                weather:
                                    container_name: weatherapp-weather
                                    image: devopseasylearning/weatherapp-weather:v${BUILD_NUMBER}.1
                                    expose:
                                        - 5000
                                    environment:
                                        APIKEY: ${WEATHERAPP_APIKEY}
                                    networks:
                                        - weatherapp
                                    restart: always
                                    depends_on:
                                        - db
                                        - redis

                                auth:
                                    container_name: weatherapp-auth
                                    image: devopseasylearning/weatherapp-auth:v${BUILD_NUMBER}.1
                                    environment:
                                        DB_HOST: db
                                        DB_PASSWORD: ${WEATHERAPP_DB_PASSWORD}
                                    expose:
                                        - 8080
                                    networks:
                                        - weatherapp
                                    restart: always
                                    depends_on:
                                        - weather

                                ui:
                                    container_name: weatherapp-ui
                                    image: devopseasylearning/weatherapp-ui:v${BUILD_NUMBER}.1
                                    environment:
                                        AUTH_HOST: auth
                                        AUTH_PORT: 8080
                                        WEATHER_HOST: weather
                                        WEATHER_PORT: 5000
                                        REDIS_USER: redis
                                        REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
                                    expose:
                                        - 3000
                                    ports:
                                        - 3000:3000
                                    networks:
                                        - weatherapp
                                    restart: always
                                    depends_on:
                                        - auth

                            networks:
                                weatherapp:

                            volumes:
                                db-data:
                                redis-data:
                            EOF
                        '''
                    }
                }
            }
        }

        stage('Deploy') {
            agent {
                label "Jenkins-static-agent"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker-compose down --remove-orphans || true
                    docker-compose up -d 
                    docker-compose ps 
                    ip addr show eth0 | grep inet | awk '{print $2}' | cut -d/ -f1
                '''
            }
        }

        stage('checking website') {
            agent {
                label "Jenkins-static-agent"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    sleep 10
                    bash weatherapp/check-login.sh
                '''
            }
        }
    }
}
