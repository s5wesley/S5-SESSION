version: '3.5'
services:
  db:
    container_name: weatherapp-db
    image: devopseasylearning/weatherapp-db:v${BUILD_NUMBER}.1
    environment:
      MYSQL_ROOT_PASSWORD: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:   WEATHERAPP
      - weatherapp
    restart: always

  redis:
    container_name: weatherapp-redis
    image: redis:v${BUILD_NUMBER}.1
    networks:
      - weatherapp
    environment:
      REDIS_USER: redis
      REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always

  weather:
    container_name: weatherapp-weather
    image: devopseasylearning/weatherapp-weather:v${BUILD_NUMBER}.1
    expose:
      - 5000
    environment:
      APIKEY: ${WEATHERAPP_APIKEY}
    networks:
      - weatherapp
    restart: always
    depends_on:
      - db
      - redis  # Weather depends on both db and redis
  auth:
    container_name: weatherapp-auth
    image: devopseasylearning/weatherapp-auth:v${BUILD_NUMBER}.1
    environment:
      DB_HOST: db
      DB_PASSWORD: ${WEATHERAPP_DB_PASSWORD}
    expose:
      - 8080
    networks:
      - weatherapp
    restart: always
    depends_on:
      - weather  # Auth depends on the weather service

  ui:
    container_name: weatherapp-ui
    image: devopseasylearning/weatherapp-ui:v${BUILD_NUMBER}.1
    environment:
     AUTH_HOST: auth
     AUTH_PORT: 8080
     WEATHER_HOST: weather
     WEATHER_PORT: 5000
     REDIS_USER: redis
     REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    expose:
      - 3000
    ports:
      - 3000:3000
    networks:
      - weatherapp
    restart: always
    depends_on:
      - auth  # UI depends on Auth
networks:
  weatherapp:

volumes:
  db-data:
  redis-data: